2024-08-07 20:23:34 | INFO | Calling function 'orchestrator' with args (<core.services.etl.etl_service.ETLService object at 0x7f48405ffb50>,) and kwargs {} | log_decorator.py:9
2024-08-07 20:23:34 | INFO | Calling function 'get_spark_session' with args (<core.services.etl.etl_service.ETLService object at 0x7f48405ffb50>,) and kwargs {} | log_decorator.py:9
2024-08-07 20:23:38 | INFO | 'get_spark_session' function returned None | log_decorator.py:14
2024-08-07 20:23:38 | INFO | Calling function 'extract_data' with args (<core.services.etl.etl_service.ETLService object at 0x7f48405ffb50>,) and kwargs {} | log_decorator.py:9
2024-08-07 20:23:42 | INFO | 'extract_data' function returned ('Success in extracting data.', True) | log_decorator.py:14
2024-08-07 20:23:42 | INFO | Calling function 'transform_data' with args (<core.services.etl.etl_service.ETLService object at 0x7f48405ffb50>, <pyspark.sql.session.SparkSession object at 0x7f48400d1a50>) and kwargs {} | log_decorator.py:9
2024-08-07 20:23:45 | INFO | 'transform_data' function returned (DataFrame[id_card: int, name_card: string, type_card: string, frame_type_card: string, race_card: string, archetype_card: string, scale_card: string, description_card: string, atk_card: int, def_card: int, level_card: int, card_set_name_card: string, card_set_code_card: string, card_set_rarity_card: string, card_set_rarity_code_card: string, card_set_price_card: string, amazon_price_card: string, cardmarket_price_card: string, coolstuffinc_price_card: string, ebay_price_card: string, tcgplayer_price_card: string, image_url_card: string, image_url_cropped_card: string, image_url_small_card: string, ban_goat_card: string, ban_ocg_card: string, ban_tcg_card: string, date_ingestion: timestamp, ygoprodeck_url: string], 'Success in transforming data.', True) | log_decorator.py:14
2024-08-07 20:23:45 | INFO | Calling function 'load_data' with args (<core.services.etl.etl_service.ETLService object at 0x7f48405ffb50>, DataFrame[id_card: int, name_card: string, type_card: string, frame_type_card: string, race_card: string, archetype_card: string, scale_card: string, description_card: string, atk_card: int, def_card: int, level_card: int, card_set_name_card: string, card_set_code_card: string, card_set_rarity_card: string, card_set_rarity_code_card: string, card_set_price_card: string, amazon_price_card: string, cardmarket_price_card: string, coolstuffinc_price_card: string, ebay_price_card: string, tcgplayer_price_card: string, image_url_card: string, image_url_cropped_card: string, image_url_small_card: string, ban_goat_card: string, ban_ocg_card: string, ban_tcg_card: string, date_ingestion: timestamp, ygoprodeck_url: string]) and kwargs {} | log_decorator.py:9
2024-08-07 20:23:55 | INFO | 'load_data' function returned ('Successful loading data.', True) | log_decorator.py:14
2024-08-07 20:23:55 | INFO | 'orchestrator' function returned None | log_decorator.py:14
2024-08-08 02:12:51 | INFO | Calling function 'orchestrator' with args (<core.services.etl.etl_service.ETLService object at 0x7fd5795dd910>,) and kwargs {} | log_decorator.py:9
2024-08-08 02:12:51 | INFO | Calling function 'get_spark_session' with args (<core.services.etl.etl_service.ETLService object at 0x7fd5795dd910>,) and kwargs {} | log_decorator.py:9
2024-08-08 02:12:55 | INFO | 'get_spark_session' function returned None | log_decorator.py:14
2024-08-08 02:12:55 | INFO | Calling function 'extract_data' with args (<core.services.etl.etl_service.ETLService object at 0x7fd5795dd910>,) and kwargs {} | log_decorator.py:9
2024-08-08 02:12:59 | INFO | 'extract_data' function returned ('Success in extracting data.', True) | log_decorator.py:14
2024-08-08 02:12:59 | INFO | Calling function 'transform_data' with args (<core.services.etl.etl_service.ETLService object at 0x7fd5795dd910>, <pyspark.sql.session.SparkSession object at 0x7fd579619a10>) and kwargs {} | log_decorator.py:9
2024-08-08 02:13:01 | INFO | 'transform_data' function returned (DataFrame[id_card: int, name_card: string, type_card: string, frame_type_card: string, race_card: string, archetype_card: string, scale_card: string, description_card: string, atk_card: int, def_card: int, level_card: int, card_set_name_card: string, card_set_code_card: string, card_set_rarity_card: string, card_set_rarity_code_card: string, card_set_price_card: string, amazon_price_card: string, cardmarket_price_card: string, coolstuffinc_price_card: string, ebay_price_card: string, tcgplayer_price_card: string, image_url_card: string, image_url_cropped_card: string, image_url_small_card: string, ban_goat_card: string, ban_ocg_card: string, ban_tcg_card: string, date_ingestion: timestamp, ygoprodeck_url: string], 'Success in transforming data.', True) | log_decorator.py:14
2024-08-08 02:13:01 | INFO | Calling function 'load_data' with args (<core.services.etl.etl_service.ETLService object at 0x7fd5795dd910>, DataFrame[id_card: int, name_card: string, type_card: string, frame_type_card: string, race_card: string, archetype_card: string, scale_card: string, description_card: string, atk_card: int, def_card: int, level_card: int, card_set_name_card: string, card_set_code_card: string, card_set_rarity_card: string, card_set_rarity_code_card: string, card_set_price_card: string, amazon_price_card: string, cardmarket_price_card: string, coolstuffinc_price_card: string, ebay_price_card: string, tcgplayer_price_card: string, image_url_card: string, image_url_cropped_card: string, image_url_small_card: string, ban_goat_card: string, ban_ocg_card: string, ban_tcg_card: string, date_ingestion: timestamp, ygoprodeck_url: string]) and kwargs {} | log_decorator.py:9
2024-08-08 02:13:10 | INFO | 'load_data' function returned ('Successful loading data.', True) | log_decorator.py:14
2024-08-08 02:13:10 | INFO | 'orchestrator' function returned None | log_decorator.py:14
